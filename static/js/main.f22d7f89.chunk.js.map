{"version":3,"sources":["logo.svg","App.js","service/BookService.js","MyForm.js","AllBookDetails.js","serviceWorker.js","notFound.js","index.js"],"names":["module","exports","App","className","BOOK_API_URL","axios","get","book","console","log","JSON","stringify","post","id","delete","MyForm","props","mySubmitHandler","event","preventDefault","bookname","state","bookName","author","authorName","price","BookService","addBooks","then","res","setState","message","history","push","myChangeHandler","e","target","name","value","style","color","backgroundColor","marginLeft","fontFamily","onSubmit","this","type","autoComplete","onChange","React","Component","AllBookDetails","books","refreshCourses","bind","deleteBook","response","retrieveAllBooks","data","_embedded","bookList","map","key","bookid","trigger","modal","closeOnDocumentClick","onClick","Boolean","window","location","hostname","match","Notfound","routing","activeclassname","to","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f22d7f89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1>Online Book Information</h1>,\n    </div>\n  );\n}\n\nexport default App; \n","import axios from 'axios';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\n// const BOOK_API_URL = 'http://localhost:8080';\r\nconst BOOK_API_URL = 'https://bookapplicationpoc.herokuapp.com/book'\r\n\r\nclass BookService {\r\n\r\n    retrieveAllBooks() {\r\n        return axios.get(`${BOOK_API_URL}/getAllBooks`);\r\n    }\r\n\r\n    addBooks(book) {\r\n        console.log(JSON.stringify(book));\r\n        return axios.post(`${BOOK_API_URL}/createBook`,book);\r\n    }\r\n\r\n    deleteBook(id) {\r\n        return axios.delete(`${BOOK_API_URL}/deleteBook/${id}`);\r\n    }\r\n\r\n    updateBooks(book,id) {\r\n        return axios.delete(`${BOOK_API_URL}/updateBook/${id}`,book);\r\n    }\r\n}\r\n\r\nexport default new BookService()","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport BookService from './service/BookService';\r\n\r\nclass MyForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        bookName: '',\r\n        authorName: '',\r\n        price: null,\r\n      };\r\n    }\r\n    mySubmitHandler = (event) => { \r\n      event.preventDefault();\r\n      let book = {bookname: this.state.bookName, author: this.state.authorName, price: this.state.price};\r\n      BookService.addBooks(book)\r\n            .then(res => {\r\n                this.setState({message : 'Book added successfully.'});\r\n                this.props.history.push('/books');\r\n            });\r\n    }\r\n    myChangeHandler = (e) => {\r\n      this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    render() {\r\n      const mystyle = {\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n        marginLeft: \"20px\",\r\n        fontFamily: \"Arial\"\r\n      };\r\n      return (\r\n        <form style={mystyle} onSubmit={this.mySubmitHandler}>\r\n        <h1 >Add Book Details</h1>\r\n        <p>Book Name:</p>\r\n        <input\r\n          type='text'\r\n          name='bookName' autoComplete=\"off\"\r\n          onChange={this.myChangeHandler}\r\n        />\r\n        <p>Author Name:</p>\r\n        <input\r\n          type='text'\r\n          name='authorName'\r\n          onChange={this.myChangeHandler}\r\n        />\r\n        <p>Price:</p>\r\n        <input\r\n          type='text'\r\n          name='price'\r\n          onChange={this.myChangeHandler}\r\n        />\r\n        <br/>\r\n        <br/>\r\n        <input type='submit' />\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default MyForm; \r\n\r\n // ReactDOM.render(<MyForm />, document.getElementById('root'));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport BookService from './service/BookService';\r\nimport './App.css';\r\nimport Popup from \"reactjs-popup\";\r\n\r\nclass AllBookDetails extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            books: [],\r\n            message: null,\r\n        }\r\n        this.refreshCourses = this.refreshCourses.bind(this);\r\n        this.deleteBook=this.deleteBook.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshCourses();\r\n    }\r\n\r\n    deleteBook(id) {\r\n        BookService.deleteBook(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of book ${id} Successful` })\r\n                    this.refreshCourses()\r\n                }\r\n            )\r\n    }\r\n\r\n    refreshCourses() {\r\n        BookService.retrieveAllBooks()\r\n            .then(\r\n                response => {\r\n                    console.log(response);\r\n                    this.setState({ books: response.data._embedded.bookList });\r\n                }\r\n            )\r\n    }\r\n   \r\n    \r\n    render() {\r\n        return (\r\n        <div className=\"container\">         \r\n                <h3>Book Details</h3>\r\n                <div className=\"container\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Book Id</th>\r\n                                <th>Book Name</th>\r\n                                <th>Author Name</th>\r\n                                <th>Price</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                                this.state.books.map(\r\n                                    book =>\r\n                                        <tr key={book.bookid}>\r\n                                            <td>{book.bookid}</td>\r\n                                            <td>{book.bookname}</td>\r\n                                            <td>{book.author}</td>\r\n                                            <td>{book.price}</td>\r\n                                            <td><Popup\r\n    trigger={<button className=\"button\"> Update</button>}\r\n    modal\r\n    closeOnDocumentClick\r\n  >\r\n    <span> Work in progress </span>\r\n  </Popup></td>\r\n    <td><button className=\"btn btn-warning\" onClick={() => this.deleteBook(book.bookid)}>Delete</button></td>\r\n        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AllBookDetails;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\n\r\nconst Notfound = () => <h1>Not found</h1>\r\n\r\n\r\nexport default Notfound","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport MyForm from './MyForm';\nimport AllBookDetails from './AllBookDetails';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Notfound from './notFound';\nimport './index.css';\n\nconst routing = (\n  <Router>\n    <div>\n    <ul>\n        <li>\n          <Link activeclassname=\"active\" to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link activeclassname=\"active\" to=\"/books\">Available Books</Link>\n        </li>\n        <li>\n          <Link activeclassname=\"active\" to=\"/addBook\">Add Book Information</Link>\n        </li>\n      </ul>\n      <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/books\" component={AllBookDetails} />\n      <Route path=\"/addBook\" component={MyForm} />\n      <Route component={Notfound} />\n      </Switch>\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}